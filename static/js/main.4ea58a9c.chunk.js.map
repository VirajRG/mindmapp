{"version":3,"sources":["components/graph.jsx","App.js","serviceWorker.js","index.js"],"names":["options","layout","improvedLayout","physics","enabled","edges","color","smooth","type","events","select","event","nodes","console","log","ReactGraph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","name","target","value","setState","defineProperty","showModal","visible","handleOk","state","nodeName","graph","slice","currId","push","id","label","from","to","setTimeout","handleCapture","input","document","getElementById","html2canvas","then","canvas","imgData","toDataURL","window","location","href","handleCancel","bind","assertThisInitialized","react_default","a","createElement","es_button","onClick","modal","title","onOk","onCancel","es_input","onChange","lib_default","style","height","React","Component","App","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ea58a9c.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport html2canvas from \"html2canvas\";\nimport Graph from \"react-graph-vis\";\nimport { Button, Modal, Input } from 'antd';\n\n\nconst options = {\n\tlayout: { improvedLayout: true },\n\tphysics: { enabled: false },\n\tedges: { color: \"#000000\", smooth: { type: 'cubicBezier' } },\n};\nconst events = {\n\tselect: function (event) {\n\t\tvar { nodes, edges } = event;\n\t\tconsole.log(\"Selected nodes:\");\n\t\tconsole.log(nodes);\n\t\tconsole.log(\"Selected edges:\");\n\t\tconsole.log(edges);\n\t}\n};\n\nclass ReactGraph extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgraph: {\n\t\t\t\tnodes: [\n\t\t\t\t\t{ id: 1, label: \"Root\", color: \"#00f6\" },\n\t\t\t\t\t{ id: 2, label: \"Node 2\", color: \"#e09c41\" },\n\t\t\t\t\t{ id: 3, label: \"Node 3\", color: \"#e0df41\" },\n\t\t\t\t\t{ id: 4, label: \"Node 4\", color: \"#7be041\" },\n\t\t\t\t\t{ id: 5, label: \"Node 5\", color: \"#41e0c9\" },\n\t\t\t\t\t{ id: 6, label: \"Node 6\", color: \"#41e0df\" }\n\t\t\t\t],\n\t\t\t\tedges: [{ from: 1, to: 2 }, { from: 1, to: 3 }, { from: 2, to: 4 }, { from: 2, to: 5 }, { from: 1, to: 6 }]\n\t\t\t}, visible: false, nodeName: '', currId: 6\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleOk = this.handleOk.bind(this);\n\t\tthis.handleCancel = this.handleCancel.bind(this);\n\t\tthis.handleCapture = this.handleCapture.bind(this);\n\t}\n\thandleChange = (e) => {\n\t\tlet name = e.target.name;\n\t\tlet value = e.target.value;\n\t\tthis.setState({ [name]: value });\n\t}\n\tshowModal = () => {\n\t\tthis.setState({\n\t\t\tvisible: true,\n\t\t});\n\t};\n\thandleOk = e => {\n\t\tconsole.log(this.state.nodeName);\n\t\tlet nodes = this.state.graph.nodes.slice();\n\t\tlet edges = this.state.graph.edges.slice();\n\t\tlet currId = this.state.currId;\n\t\tcurrId = currId + 1;\n\t\tnodes.push({ id: currId, label: this.state.nodeName, color: '#f0f0f0f0' });\n\t\tedges.push({ from: 1, to: currId });\n\t\tthis.setState({\n\t\t\tvisible: false, graph: { nodes, edges }, currId\n\t\t});\n\t\tsetTimeout(() => {\n\t\t\tconsole.log(this.state)\n\t\t}, 1000);\n\t};\n\thandleCapture = e => {\n\t\tconst input = document.getElementById('screen');\n\t\thtml2canvas(input)\n\t\t\t.then((canvas) => {\n\t\t\t\tconst imgData = canvas.toDataURL('image/png');\n\t\t\t\twindow.location.href=imgData; \n\t\t\t});\n\t}\n\thandleCancel = e => {\n\t\tconsole.log(e);\n\t\tthis.setState({\n\t\t\tvisible: false,\n\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Button onClick={this.showModal}>Add +</Button>\n\t\t\t\t<Button onClick={this.handleCapture}>Capture</Button>\n\t\t\t\t<Modal\n\t\t\t\t\ttitle=\"Basic Modal\"\n\t\t\t\t\tvisible={this.state.visible}\n\t\t\t\t\tonOk={this.handleOk}\n\t\t\t\t\tonCancel={this.handleCancel}\n\t\t\t\t>\n\t\t\t\t\t<Input name=\"nodeName\" value={this.state.nodeName} onChange={this.handleChange} />\n\t\t\t\t</Modal>\n\t\t\t\t<div id=\"screen\">\n\t\t\t\t\t<Graph graph={this.state.graph} options={options} events={events} style={{ height: \"640px\" }} />\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n\nexport default ReactGraph;","import React from 'react';\nimport { Button } from 'antd';\n\nimport ReactGraph from './components/graph.jsx';\n\nimport './App.css';\n\n\nconst App = () => (\n  <div>\n    <ReactGraph />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}